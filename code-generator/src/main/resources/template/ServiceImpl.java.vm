package ${package}.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import ${mainPath}.common.framework.base.entity.EntityUtil;
import ${mainPath}.common.framework.constant.EntityConstant;
import ${mainPath}.common.util.http.ApiResult;
import ${mainPath}.common.util.page.PageUtils;
import ${mainPath}.common.util.page.Query;
import ${mainPath}.common.util.uuid.IdWorker;
import ${package}.api.entity.${className}Entity;
import ${package}.api.service.${className}Service;
import ${package}.api.vo.${className}Vo;
import ${package}.service.mapper.${className}Mapper;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;



@Service()
public class ${className}ServiceImpl extends ServiceImpl<${className}Mapper, ${className}Entity> implements ${className}Service {

    @Override
    public PageUtils queryForPage(Map<String, Object> params) {
        //关键字查询 键入条件
        LambdaQueryWrapper<${className}Entity> wrapper = new QueryWrapper<${className}Entity>().lambda();
        wrapper.eq(${className}Entity::getLogicDel, EntityConstant.LOGIC_EXIST);
        wrapper.orderByDesc(${className}Entity::getCreateTime);
        Page page = (Page)page(new Query(params).getPage(),wrapper);
        List<${className}Entity> entities = page.getRecords();
        List<${className}Vo> vos = new ArrayList<>();
        entities.forEach(item->{
            ${className}Vo vo = new ${className}Vo();
            BeanUtils.copyProperties(item,vo);
            vos.add(vo);
        });
        page.setRecords(vos);
        return new PageUtils(page);
    }

    @Override
    public ApiResult save${className}(${className}Vo vo) {
        try {
            if(vo!=null){
                String id = vo.getId();
                if(StringUtils.isNotBlank(id)){
                    ${className}Entity entity = getById(id);
                    if(entity!=null){
                        BeanUtils.copyProperties(vo,entity);
                        updateById(entity);
                    }
                }else{
                    ${className}Entity entity = new ${className}Entity();
                    BeanUtils.copyProperties(vo,entity);
                    EntityUtil.initEntity(entity);
                    entity.setId(IdWorker.Uuid());
                    save(entity);
                }
            }
            return ApiResult.ok();
        }catch (Exception e){
            e.printStackTrace();
            return ApiResult.error("操作异常："+e.getMessage());
        }
    }

    @Override
    public ${className}Vo getVoById(String id) {
        ${className}Entity entity = getById(id);
        if(entity!=null){
            ${className}Vo vo = new ${className}Vo();
            BeanUtils.copyProperties(entity,vo);
            return vo;
        }
        return null;
    }

    @Override
    public void del(String id) {
        ${className}Entity entity = getById(id);
        if(entity!=null){
            EntityUtil.delEntity(entity);
            updateById(entity);
        }
    }

}
